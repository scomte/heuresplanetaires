# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'heures_magiques.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QIcon, QPixmap, QCursor
from PyQt5.QtWidgets import QMessageBox
from PyQt5.QtCore import QDate
from datetime import datetime
from utils import get_year_week_count
from astrology import *
from utils import get_location_datas, getMoonPhaseName, deleteFileLine


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(790, 600)
        MainWindow.setFixedSize(790, 600)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(470, -1, 311, 261))
        self.groupBox.setObjectName("groupBox")
        self.lPicPlanet = QtWidgets.QLabel(self.groupBox)
        self.lPicPlanet.setGeometry(QtCore.QRect(100, 20, 91, 91))
        self.lPicPlanet.setText("")
        self.lPicPlanet.setScaledContents(True)
        self.lPicPlanet.setObjectName("lPicPlanet")
        self.lPicMoon = QtWidgets.QLabel(self.groupBox)
        self.lPicMoon.setGeometry(QtCore.QRect(220, 160, 71, 71))
        self.lPicMoon.setText("")
        self.lPicMoon.setScaledContents(True)
        self.lPicMoon.setObjectName("lPicMoon")
        self.lPlanetDay = QtWidgets.QLabel(self.groupBox)
        self.lPlanetDay.setGeometry(QtCore.QRect(7, 100, 291, 51))
        font = QtGui.QFont()
        font.setFamily("DejaVu Serif")
        font.setPointSize(20)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.lPlanetDay.setFont(font)
        self.lPlanetDay.setAlignment(QtCore.Qt.AlignCenter)
        self.lPlanetDay.setObjectName("lPlanetDay")
        self.lDayStart = QtWidgets.QLabel(self.groupBox)
        self.lDayStart.setGeometry(QtCore.QRect(10, 150, 181, 31))
        self.lDayStart.setObjectName("lDayStart")
        self.lNightStart = QtWidgets.QLabel(self.groupBox)
        self.lNightStart.setGeometry(QtCore.QRect(10, 180, 181, 31))
        self.lNightStart.setObjectName("lNightStart")
        self.lMoonPhase = QtWidgets.QLabel(self.groupBox)
        self.lMoonPhase.setGeometry(QtCore.QRect(10, 210, 181, 31))
        self.lMoonPhase.setObjectName("lMoonPhase")
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(9, -1, 451, 261))
        self.groupBox_2.setObjectName("groupBox_2")
        self.calendarWidget = QtWidgets.QCalendarWidget(self.groupBox_2)
        self.calendarWidget.setGeometry(QtCore.QRect(10, 60, 432, 193))
        self.calendarWidget.setObjectName("calendarWidget")
        self.lELocation = QtWidgets.QLineEdit(self.groupBox_2)
        self.lELocation.setGeometry(QtCore.QRect(10, 20, 391, 31))
        self.lELocation.setObjectName("lELocation")
        self.pBLocation = QtWidgets.QPushButton(self.groupBox_2)
        self.pBLocation.setGeometry(QtCore.QRect(410, 20, 31, 31))
        self.pBLocation.setObjectName("pBLocation")
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setItalic(True)
        self.groupBox_3 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_3.setGeometry(QtCore.QRect(10, 260, 541, 293))
        self.groupBox_3.setObjectName("groupBox_3")
        self.tWdayhours = QtWidgets.QTableWidget(self.groupBox_3)
        self.tWdayhours.setGeometry(QtCore.QRect(7, 30, 261, 252))
        self.tWdayhours.setEditTriggers(
            QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tWdayhours.setObjectName("tWdayhours")
        self.tWdayhours.setColumnCount(3)
        self.tWdayhours.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tWdayhours.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tWdayhours.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tWdayhours.setHorizontalHeaderItem(2, item)
        header = self.tWdayhours.horizontalHeader()
        header.setSectionResizeMode(0, QtWidgets.QHeaderView.Stretch)
        header.setSectionResizeMode(1, QtWidgets.QHeaderView.ResizeToContents)
        header.setSectionResizeMode(2, QtWidgets.QHeaderView.ResizeToContents)
        # self.tWdayhours.setColumnWidth(0, 118)
        # self.tWdayhours.setColumnWidth(1, 70)
        # self.tWdayhours.setColumnWidth(2, 70)
        self.tWnighthours = QtWidgets.QTableWidget(self.groupBox_3)
        self.tWnighthours.setGeometry(QtCore.QRect(273, 30, 261, 252))
        self.tWnighthours.setEditTriggers(
            QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tWnighthours.setObjectName("tWnighthours")
        self.tWnighthours.setColumnCount(3)
        self.tWnighthours.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tWnighthours.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tWnighthours.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tWnighthours.setHorizontalHeaderItem(2, item)
        header = self.tWnighthours.horizontalHeader()
        header.setSectionResizeMode(0, QtWidgets.QHeaderView.Stretch)
        header.setSectionResizeMode(1, QtWidgets.QHeaderView.ResizeToContents)
        header.setSectionResizeMode(2, QtWidgets.QHeaderView.ResizeToContents)
        # self.tWnighthours.setColumnWidth(0, 118)
        # self.tWnighthours.setColumnWidth(1, 70)
        # self.tWnighthours.setColumnWidth(2, 70)
        self.groupBox_4 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_4.setGeometry(QtCore.QRect(560, 260, 221, 293))
        self.groupBox_4.setObjectName("groupBox_4")
        self.pBPrint = QtWidgets.QPushButton(self.groupBox_4)
        self.pBPrint.setGeometry(QtCore.QRect(59, 240, 101, 41))
        self.pBPrint.setObjectName("pBPrint")
        self.rBPrintDay = QtWidgets.QRadioButton(self.groupBox_4)
        self.rBPrintDay.setGeometry(QtCore.QRect(10, 20, 99, 22))
        self.rBPrintDay.setObjectName("rBPrintDay")
        self.rBPrintWeek = QtWidgets.QRadioButton(self.groupBox_4)
        self.rBPrintWeek.setGeometry(QtCore.QRect(10, 50, 99, 22))
        self.rBPrintWeek.setObjectName("rBPrintWeek")
        self.rBPrintMonth = QtWidgets.QRadioButton(self.groupBox_4)
        self.rBPrintMonth.setGeometry(QtCore.QRect(10, 80, 99, 22))
        self.rBPrintMonth.setObjectName("rBPrintMonth")
        self.rBPrintYear = QtWidgets.QRadioButton(self.groupBox_4)
        self.rBPrintYear.setGeometry(QtCore.QRect(10, 110, 99, 22))
        self.rBPrintYear.setObjectName("rBPrintYear")
        self.lColorTheme = QtWidgets.QLabel(self.groupBox_4)
        self.lColorTheme.setGeometry(QtCore.QRect(100, 140, 111, 91))
        self.lColorTheme.setObjectName("lColorTheme")
        self.lColorTheme.setScaledContents(True)
        self.cBThemeColor = QtWidgets.QComboBox(self.groupBox_4)
        self.cBThemeColor.setGeometry(QtCore.QRect(10, 180, 81, 22))
        self.cBThemeColor.setObjectName("cBThemeColor")
        self.cBThemeColor.addItem("")
        self.cBThemeColor.addItem("")
        self.cBThemeColor.addItem("")
        self.lBLocation = QtWidgets.QLabel(self.centralwidget)
        self.lBLocation.setGeometry(QtCore.QRect(10, 560, 771, 21))
        self.lBLocation.setText("")
        self.lBLocation.setObjectName("lBLocation")
        self.dEPrintDay = QtWidgets.QDateEdit(self.groupBox_4)
        self.dEPrintDay.setGeometry(QtCore.QRect(100, 20, 110, 22))
        self.dEPrintDay.setObjectName("dEPrintDay")
        self.cBPrintMonth = QtWidgets.QComboBox(self.groupBox_4)
        self.cBPrintMonth.setGeometry(QtCore.QRect(100, 80, 111, 22))
        self.cBPrintMonth.setObjectName("cBPrintMonth")
        self.cBPrintMonth.addItem("")
        self.cBPrintMonth.addItem("")
        self.cBPrintMonth.addItem("")
        self.cBPrintMonth.addItem("")
        self.cBPrintMonth.addItem("")
        self.cBPrintMonth.addItem("")
        self.cBPrintMonth.addItem("")
        self.cBPrintMonth.addItem("")
        self.cBPrintMonth.addItem("")
        self.cBPrintMonth.addItem("")
        self.cBPrintMonth.addItem("")
        self.cBPrintMonth.addItem("")
        self.cBPrintWeek = QtWidgets.QComboBox(self.groupBox_4)
        self.cBPrintWeek.setGeometry(QtCore.QRect(100, 50, 111, 22))
        self.cBPrintWeek.setObjectName("cBPrintWeek")
        self.cBPrintYear = QtWidgets.QComboBox(self.groupBox_4)
        self.cBPrintYear.setGeometry(QtCore.QRect(100, 110, 111, 22))
        self.cBPrintYear.setObjectName("cBPrintYear")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 790, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # Initilisation
        self.location = ''
        self.latitude = ''
        self.longitude = ''
        self.address = ''
        self.dayList = []
        self.nightList = []
        self.init = True
        self.locationFilePath = "locations.txt"
        self.extractColorTheme = 1

        with open(self.locationFilePath, "r") as file:
            inputLocation = file.readline().replace('\n', '')

        if inputLocation:
            self.location = inputLocation
            self.lELocation.setText(inputLocation)
        # Initialize Extract datas
        self.updateDayDatas()

        # When date is updated in calendarWidget
        self.calendarWidget.clicked.connect(self.updateDayDatas)

        # click on the pushButton pBLocation ('Go')
        self.pBLocation.clicked.connect(self.getHoursDatas)

        # click on the pushButton pBPrint ('Imprimer')
        self.pBPrint.clicked.connect(self.makeExtraction)

        # comboBox Color Theme action
        # self.cBThemeColor.currentTextChanged(self.updateExtractColorTheme())
        # self.cBThemeColor.currentIndexChanged(self.updateExtractColorTheme())
        # self.cBThemeColor.currentIndexChanged(lambda: self.updateExtractColorTheme(self.cBThemeColor))
        # self.cBThemeColor.currentIndexChanged()
        self.cBThemeColor.activated[str].connect(self.updateExtractColorTheme)
        self.updateExtractColorTheme()  # First call

        # Radio Buttons gestion
        self.rBPrintWeek.setChecked(True)
        self.btnstate(self.rBPrintWeek)
        self.rBPrintDay.toggled.connect(lambda: self.btnstate(self.rBPrintDay))
        self.rBPrintWeek.toggled.connect(
            lambda: self.btnstate(self.rBPrintWeek))
        self.rBPrintMonth.toggled.connect(
            lambda: self.btnstate(self.rBPrintMonth))
        self.rBPrintYear.toggled.connect(
            lambda: self.btnstate(self.rBPrintYear))

        self.init = False

    def retranslateUi(self, MainWindow):
        # workingDate = datetime.today()
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.groupBox.setTitle(_translate("MainWindow", "Jour"))
        self.lPicPlanet.setText(_translate("MainWindow", ""))
        self.lPicMoon.setText(_translate("MainWindow", ""))
        self.lPlanetDay.setText(_translate("MainWindow", ""))
        self.lDayStart.setText(_translate("MainWindow", ""))
        self.lNightStart.setText(_translate("MainWindow", ""))
        self.groupBox_2.setTitle(_translate("MainWindow", "Paramètres"))
        self.groupBox_3.setTitle(_translate("MainWindow", "Heures du jour"))
        self.groupBox_4.setTitle(_translate("MainWindow", "Impression"))
        self.lELocation.setText(_translate(
            "MainWindow", "Lieu(Adresse/Ville/...)"))
        self.pBLocation.setText(_translate("MainWindow", "Go"))
        self.pBPrint.setText(_translate("MainWindow", "Imprimer"))
        self.rBPrintDay.setText(_translate("MainWindow", "Jour"))
        self.rBPrintWeek.setText(_translate("MainWindow", "Semaine"))
        self.rBPrintMonth.setText(_translate("MainWindow", "Mois"))
        self.rBPrintYear.setText(_translate("MainWindow", "Année"))
        self.cBPrintMonth.setItemText(0, _translate("MainWindow", "1"))
        self.cBPrintMonth.setItemText(1, _translate("MainWindow", "2"))
        self.cBPrintMonth.setItemText(2, _translate("MainWindow", "3"))
        self.cBPrintMonth.setItemText(3, _translate("MainWindow", "4"))
        self.cBPrintMonth.setItemText(4, _translate("MainWindow", "5"))
        self.cBPrintMonth.setItemText(5, _translate("MainWindow", "6"))
        self.cBPrintMonth.setItemText(6, _translate("MainWindow", "7"))
        self.cBPrintMonth.setItemText(7, _translate("MainWindow", "8"))
        self.cBPrintMonth.setItemText(8, _translate("MainWindow", "9"))
        self.cBPrintMonth.setItemText(9, _translate("MainWindow", "10"))
        self.cBPrintMonth.setItemText(10, _translate("MainWindow", "11"))
        self.cBPrintMonth.setItemText(11, _translate("MainWindow", "12"))
        self.lColorTheme.setText(_translate("MainWindow", ""))
        self.cBThemeColor.setItemText(0, _translate("MainWindow", "Bleu"))
        self.cBThemeColor.setItemText(1, _translate("MainWindow", "Rouge"))
        self.cBThemeColor.setItemText(2, _translate("MainWindow", "Vert"))

        item = self.tWdayhours.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Planète"))
        item = self.tWdayhours.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Début"))
        item = self.tWdayhours.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Fin"))
        item = self.tWnighthours.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Planète"))
        item = self.tWnighthours.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Début"))
        item = self.tWnighthours.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Fin"))

    def updateExtractColorTheme(self):
        # print("combobox changed", self.cBThemeColor.currentIndex(), self.cBThemeColor.currentText())
        self.extractColorTheme = self.cBThemeColor.currentIndex() + 1
        picThemeColor = "images/Theme_" + str(self.extractColorTheme) + ".png"
        self.lColorTheme.setPixmap(QtGui.QPixmap(picThemeColor))

    def updateDayDatas(self):
        workingDate = self.calendarWidget.selectedDate().toPyDate()
        dEPrintDay = self.dEPrintDay.date().toPyDate()

        # Test if date change in calendarWidget
        if (workingDate != dEPrintDay):
            # Update year combobox
            yearList = [str(workingDate.year + i) for i in range(11)]
            self.cBPrintYear.addItems(yearList)
            # Update month combobox
            # print(self.cBPrintMonth.currentText())
            self.cBPrintMonth.setCurrentIndex(workingDate.month - 1)
            # Update week combobox
            weekCount = get_year_week_count(workingDate.year)
            weekList = [str(i + 1) for i in range(weekCount)]
            self.cBPrintWeek.addItems(weekList)
            currentWeek = workingDate.isocalendar()[1]
            self.cBPrintWeek.setCurrentIndex(currentWeek - 1)
            # Update day EditDate
            # print(self.dEPrintDay.date().toPyDate())
            self.dEPrintDay.setDate(QtCore.QDate(workingDate))
            # print(self.dEPrintDay.date().toPyDate())

            # Get day Astrology datas
            self.getHoursDatas()

    def updateHoursDisplay(self):
        workingDate = self.calendarWidget.selectedDate().toPyDate()
        currentWeek = workingDate.isocalendar()[1]
        astrology = Astrology()
        astrology.date = workingDate
        astrology.day = workingDate
        astrology.week = currentWeek
        astrology.month = workingDate.month
        astrology.year = workingDate.year
        astrology.type_extraction = "day"
        astrology.location = self.lELocation.text()
        astrology.latitude = self.latitude
        astrology.longitude = self.longitude
        astrology.address = self.address
        result = astrology.get_magic_hours()

        self.dayList = result['day_list']
        self.nightList = result['night_list']
        dayName = self.dayList[0]['day_name']
        dayPlanet = self.dayList[0]['day_planet']
        dayHourStart = self.dayList[0]['hour_start']
        nightHourStart = self.nightList[0]['hour_start']
        moonStage = result['moon_stage']
        picMoon = ""

        self.lPlanetDay.setText('Jour de ' + dayPlanet)
        if (dayPlanet == 'Soleil'):
            self.lPlanetDay.setText('Jour du ' + dayPlanet)
        if (dayPlanet == 'Lune'):
            self.lPlanetDay.setText('Jour de la ' + dayPlanet)

        picPlanet = "images/" + dayPlanet.lower() + ".png"
        self.lPicPlanet.setPixmap(QtGui.QPixmap(picPlanet))
        # self.resize(pixmap.width(57),pixmap.height(57))

        if (moonStage):
            picMoon = 'images/moon_phase_'.lower() + str(moonStage) + '.png'
            self.lPicMoon.setPixmap(QtGui.QPixmap(picMoon))
            self.lMoonPhase.setText(getMoonPhaseName(moonStage))
        else:
            self.lPicMoon.setPixmap(QtGui.QPixmap(""))
            self.lMoonPhase.setText("")

        self.lDayStart.setText('Le jour commence à ' + dayHourStart)
        self.lNightStart.setText('La nuit commence à ' + nightHourStart)

        # update TableWidget
        self.loadTables()

    def loadTables(self):
        self.tWdayhours.setRowCount(len(self.dayList))
        for row, dayhour in enumerate(self.dayList, start=1):
            self.tWdayhours.setItem(
                row - 1, 0, QtWidgets.QTableWidgetItem(dayhour['planet']))
            self.tWdayhours.setItem(
                row - 1, 1, QtWidgets.QTableWidgetItem(dayhour['hour_start']))
            self.tWdayhours.setItem(
                row - 1, 2, QtWidgets.QTableWidgetItem(dayhour['hour_end']))
            self.tWdayhours.setRowHeight(row - 1, 11)
            self.tWdayhours.setFont(QtGui.QFont('Arial', 10))
        self.tWnighthours.setRowCount(len(self.nightList))
        for row, nighthour in enumerate(self.nightList, start=1):
            self.tWnighthours.setItem(
                row - 1, 0, QtWidgets.QTableWidgetItem(nighthour['planet']))
            self.tWnighthours.setItem(
                row - 1, 1, QtWidgets.QTableWidgetItem(nighthour['hour_start']))
            self.tWnighthours.setItem(
                row - 1, 2, QtWidgets.QTableWidgetItem(nighthour['hour_end']))
            self.tWnighthours.setRowHeight(row - 1, 10)
            self.tWnighthours.setFont(QtGui.QFont('Arial', 10))

    def getHoursDatas(self):
        # Get day Astrology datas
        if (
            not (self.lELocation.text()) or self.lELocation.text(
            ) == 'Lieu(Adresse/Ville/...)'
        ):
            if (not self.init):
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Warning)
                msg.setWindowTitle("Problème lieu")
                msg.setText("Veuillez saisir un lieu valide")
                x = msg.exec_()  # this will show our messagebox
            return
        # Test location
        if ((self.location != self.lELocation.text()) or self.init):
            if not self.init:
                with open(self.locationFilePath, "w") as f:
                    deleteFileLine(self.locationFilePath, 1)
                    f.write(self.lELocation.text())
                    f.close()
            locationDatas = get_location_datas(self.lELocation.text())
            errorLocation = locationDatas["error"]
            self.location = self.lELocation.text()
            self.latitude = locationDatas["latitude"]
            self.longitude = locationDatas["longitude"]
            self.address = locationDatas["address"]

            if (not errorLocation):
                # self.lELocation.setText(locationDatas["address"])
                self.lBLocation.setText(locationDatas["address"])
                self.updateHoursDisplay()
            else:
                self.lBLocation.setText("")
                self.location = ""
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setWindowTitle("Erreur geolocalisation")
                msg.setText(errorLocation)
                x = msg.exec_()  # this will show our messagebox
        else:
            self.updateHoursDisplay()

    def makeExtraction(self):
        if (
            not (self.lELocation.text()) or self.lELocation.text(
            ) == 'Lieu(Adresse/Ville/...)'
        ):
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Warning)
            msg.setWindowTitle("Problème lieu")
            msg.setText("Veuillez saisir un lieu valide")
            x = msg.exec_()  # this will show our messagebox
            return

        if self.rBPrintDay.isChecked():
            typeExtraction = "day"
        if self.rBPrintMonth.isChecked():
            typeExtraction = "month"
        if self.rBPrintWeek.isChecked():
            typeExtraction = "week"
        if self.rBPrintYear.isChecked():
            typeExtraction = "year"

        exportFile = 'ExportTable.pdf'

        workingDate = self.calendarWidget.selectedDate().toPyDate()
        currentWeek = workingDate.isocalendar()[1]
        astrology = Astrology()
        astrology.date = self.dEPrintDay.date().toPyDate()
        astrology.day = self.dEPrintDay.date().toPyDate()
        astrology.week = int(self.cBPrintWeek.currentText())
        astrology.month = int(self.cBPrintMonth.currentText())
        astrology.year = int(self.cBPrintYear.currentText())
        astrology.type_extraction = typeExtraction
        astrology.location = self.lELocation.text()
        astrology.latitude = self.latitude
        astrology.longitude = self.longitude
        astrology.address = self.address
        astrology.exportHours.fileName = exportFile
        astrology.exportHours.docTitle = 'Extraction des heures planétaires'
        astrology.colorStyle = self.extractColorTheme

        QtWidgets.qApp.setOverrideCursor(QCursor(QtCore.Qt.WaitCursor))

        result = astrology.export_multi_dates()

        QtWidgets.qApp.restoreOverrideCursor()
        import webbrowser
        webbrowser.open_new(exportFile)

        # msg = QMessageBox()
        # msg.setIcon(QMessageBox.Information)
        # msg.setWindowTitle("Impression")
        # msg.setText("Extraction terminée")
        # x = msg.exec_()  # this will show our messagebox

    def btnstate(self, b):

        if b.text() == "Jour":
            if b.isChecked() is True:
                # print(b.text() + " is selected")
                self.dEPrintDay.setEnabled(True)
                self.cBPrintWeek.setEnabled(False)
                self.cBPrintMonth.setEnabled(False)
                self.cBPrintYear.setEnabled(False)
            # else:
            #     print(b.text() + " is deselected")

        if b.text() == "Semaine":
            if b.isChecked() is True:
                # print(b.text() + " is selected")
                self.dEPrintDay.setEnabled(False)
                self.cBPrintWeek.setEnabled(True)
                self.cBPrintMonth.setEnabled(False)
                self.cBPrintYear.setEnabled(True)
            # else:
            #     print(b.text() + " is deselected")

        if b.text() == "Mois":
            if b.isChecked() is True:
                # print(b.text() + " is selected")
                self.dEPrintDay.setEnabled(False)
                self.cBPrintWeek.setEnabled(False)
                self.cBPrintMonth.setEnabled(True)
                self.cBPrintYear.setEnabled(True)
            # else:
            #     print(b.text() + " is deselected")

        if b.text() == "Année":
            if b.isChecked() is True:
                # print(b.text() + " is selected")
                self.dEPrintDay.setEnabled(False)
                self.cBPrintWeek.setEnabled(False)
                self.cBPrintMonth.setEnabled(False)
                self.cBPrintYear.setEnabled(True)
            # else:
            #     print(b.text() + " is deselected")


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
